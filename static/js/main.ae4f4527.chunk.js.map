{"version":3,"sources":["firebase.js","PictureGenerator.js","Polaroid.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","PictureGenerator","getRandomImage","axios","method","url","responseType","params","client_id","orientation","dpr","ar","then","apiResponse","data","urls","regular","console","error","setState","picture","altText","alt_description","handleSubmit","e","preventDefault","dbRef","database","ref","newObj","image","state","story","userInput","name","userName","push","document","querySelector","value","inspImgContainer","src","alt","handleInputChange","target","handleNameChange","hideLabel","classList","add","showLabel","remove","this","className","onClick","onSubmit","placeholder","id","type","onChange","htmlFor","maxLength","required","length","Component","Polaroid","polaroidFlip","polaroidClass","props","fireKey","App","allStories","on","firebaseDataObj","val","log","storyArray","propertyKey","storyObject","map","stories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4TAgBEA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,E,iBCsGeS,E,kDAlHb,aAAe,IAAD,8BACZ,gBASJC,eAAiB,WAEbC,IAAM,CACJC,OAAQ,MACRC,IAAK,yCACLC,aAAc,OACdC,OAAQ,CACNC,UAAW,8CACXC,YAAa,WACbC,IAAK,EACLC,GAAI,+BAELC,MAAK,SAACC,GACP,IAAIA,EAAYC,KAAKC,KAAKC,QAMxB,OAAOC,QAAQC,MAAM,0EALrB,EAAKC,SAAS,CACZC,QAASP,EAAYC,KAAKC,KAAKC,QAC/BK,QAASR,EAAYC,KAAKQ,sBA1BpB,EAiCdC,aAAe,SAACC,GACdA,EAAEC,iBACF,IAAMC,EAAQlC,EAASmC,WAAWC,MAC5BC,EAAS,CACbC,MAAO,EAAKC,MAAMX,QAClBY,MAAM,EAAKD,MAAME,UACjBZ,QAAS,EAAKU,MAAMV,QACpBa,KAAM,EAAKH,MAAMI,UAEnBT,EAAMU,KAAKP,GACXQ,SAASC,cAAc,YAAYC,MAAO,GAC1C,EAAKpB,SAAS,CACZc,UAAW,GACXE,SAAU,KAEZ,IAAMK,EAAmBH,SAASC,cAAc,uBAChDE,EAAiBC,IAAI,GACrBD,EAAiBE,IAAI,IAlDT,EAoDdC,kBAAoB,SAACnB,GACnB,EAAKL,SAAS,CACZc,UAAWT,EAAEoB,OAAOL,SAtDV,EAyDdM,iBAAmB,SAACrB,GAClB,EAAKL,SAAS,CACZgB,SAAUX,EAAEoB,OAAOL,SA3DT,EA8DdO,UAAY,WACUT,SAASC,cAAc,eAC/BS,UAAUC,IAAI,WAhEd,EAkEdC,UAAY,WACQZ,SAASC,cAAc,cAC/BS,UAAUG,OAAO,WAlE3B,EAAKnB,MAAQ,CACXX,QAAS,GACTC,QAAS,GACTY,UAAW,GACXE,SAAU,IANA,E,qDAsEN,IAAD,EAEsBgB,KAAKpB,MAA1BX,EAFD,EAECA,QAASC,EAFV,EAEUA,QACjB,OACE,cAAC,WAAD,UACE,iCACE,sBAAK+B,UAAU,UAAf,UAEE,kDACA,mBAAGA,UAAU,eAAb,oEAEA,sBAAKA,UAAU,gBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,qBAAqBX,IAAKrB,EAASsB,IAAKrB,IAEvD,wBAAQgC,QAASF,KAAKjD,eAAtB,wCAEF,uBAAMoD,SAAUH,KAAK5B,aAArB,UACE,uBAAOgC,YAAY,OAAOC,GAAG,OAAOC,KAAK,OAAOC,SAAUP,KAAKN,mBAC/D,uBAAOO,UAAU,SAASO,QAAQ,OAAlC,kBACE,sBAAKP,UAAU,iBAAf,UACE,sBAAKI,GAAG,UAAR,UACE,0BACEC,KAAK,OACLD,GAAG,WACHI,UAAU,OACVC,UAAU,EACVN,YAAY,4BACZG,SAAUP,KAAKR,oBAEjB,uBAAOS,UAAU,oBAAoBO,QAAQ,WAA7C,oCACA,oBAAGP,UAAU,UAAb,UAAyBD,KAAKpB,MAAME,UAAU6B,OAA9C,cAEF,wE,GAxGaC,aC6BhBC,E,kDA/Bb,aAAe,IAAD,8BACZ,gBAKDC,aAAe,WACZ,EAAK9C,SAAU,CACb+C,eAAgB,EAAKnC,MAAMmC,iBAN/B,EAAKnC,MAAQ,CACXmC,eAAe,GAHL,E,qDAcZ,OACE,6BACE,sBAAKb,QAASF,KAAKc,aAAcb,UAAWD,KAAKpB,MAAMmC,cAAgB,WAAY,mBAAnF,UACE,sBAAKd,UAAU,yBAAf,UACE,mBAAGA,UAAU,WAAb,uCACA,qBAAKA,UAAU,sBAAf,SACE,qBAAKX,IAAKU,KAAKgB,MAAMnC,MAAMF,MAAOY,IAAKS,KAAKgB,MAAMnC,MAAMX,eAG5D,qBAAK+B,UAAU,wBAAf,SACE,8BAAID,KAAKgB,MAAMnC,MAAMA,MAArB,IAA4B,8CAAYmB,KAAKgB,MAAMnC,MAAME,KAA7B,gBATzBiB,KAAKgB,MAAMnC,MAAMoC,a,GAhBTL,aCoDRM,E,kDA/Cd,aAAe,IAAD,8BACX,gBACKtC,MAAQ,CACXuC,WAAY,IAHH,E,gEAMQ,IAAD,OAEJ9E,EAASmC,WAAWC,MAE5B2C,GAAG,SAAS,SAACzD,GACjB,IAAM0D,EAAkB1D,EAAK2D,MAC7BxD,QAAQyD,IAAIF,GAEZ,IAAIG,EAAa,GAEjB,IAAK,IAAIC,KAAeJ,EAAiB,CACvC,IAAMK,EAAcL,EAAgBI,GAEpCC,EAAYT,QAAUQ,EACtBD,EAAWvC,KAAKyC,GAElB,EAAK1D,SAAS,CACZmD,WAAYK,S,+BAOhB,OADA1D,QAAQyD,IAAIvB,KAAKpB,MAAMuC,YAErB,eAAC,WAAD,WACE,cAAC,EAAD,IACI,oBAAIlB,UAAU,UAAd,SAGAD,KAAKpB,MAAMuC,WAAWQ,KAAI,SAACC,GACzB,OACE,cAAC,EAAD,CAAU/C,MAAO+C,gB,GAvCfhB,aCMHiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtE,MAAK,YAAkD,IAA/CuE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrD,SAASsD,eAAe,SAM1BX,M","file":"static/js/main.ae4f4527.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\r\n//Realtime database\r\nimport 'firebase/database';\r\n// import firebase from \"firebase/app\"\r\n\r\n// Your web app's Firebase configuration\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyBg77VTyQ5WPuEuRtehp9aN-nSkEM-h5ek\",\r\n    authDomain: \"project-five-f24a3.firebaseapp.com\",\r\n    databaseURL: \"https://project-five-f24a3.firebaseio.com\",\r\n    projectId: \"project-five-f24a3\",\r\n    storageBucket: \"project-five-f24a3.appspot.com\",\r\n    messagingSenderId: \"654429106863\",\r\n    appId: \"1:654429106863:web:3c0d009b99d9c4137b5a5a\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import { Component, Fragment } from  'react';\r\nimport axios from 'axios';\r\nimport firebase from './firebase.js';\r\nimport './App.css';\r\n\r\nclass PictureGenerator extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      picture: '',\r\n      altText: '',\r\n      userInput: '',\r\n      userName: '',\r\n    }\r\n  }\r\n\r\ngetRandomImage = () => {\r\n\r\n    axios({\r\n      method: 'GET',\r\n      url: 'https://api.unsplash.com/photos/random',\r\n      responseType: 'json',\r\n      params: {\r\n        client_id: '-j_epipWtt2oE7lw_so3EUbm0Uvo0n0OaR--12TsBMw',\r\n        orientation: 'squarish',\r\n        dpr: 2,\r\n        ar: 'w=380%26ar=1:1%26fit=crop'\r\n      }\r\n    }).then((apiResponse) => {\r\n      if (apiResponse.data.urls.regular) {\r\n        this.setState({\r\n          picture: apiResponse.data.urls.regular,\r\n          altText: apiResponse.data.alt_description\r\n        })\r\n      } else {\r\n        return console.error('Looks like our image host is having a creative block. Try again later.')\r\n      }\r\n    })\r\n  }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const dbRef = firebase.database().ref();\r\n    const newObj = {\r\n      image: this.state.picture,\r\n      story:this.state.userInput,\r\n      altText: this.state.altText,\r\n      name: this.state.userName\r\n    }\r\n    dbRef.push(newObj)\r\n    document.querySelector('textarea').value ='';\r\n    this.setState({\r\n      userInput: '',\r\n      userName: ''\r\n    })\r\n    const inspImgContainer = document.querySelector('.selectImgContainer');\r\n    inspImgContainer.src='';\r\n    inspImgContainer.alt='';\r\n  }\r\n  handleInputChange = (e) => {\r\n    this.setState({\r\n      userInput: e.target.value\r\n    })\r\n  }\r\n  handleNameChange = (e) => {\r\n    this.setState({\r\n      userName: e.target.value\r\n    })\r\n  }\r\n  hideLabel = () => {\r\n    const hiddenLabel = document.querySelector('.storyLabel');\r\n    hiddenLabel.classList.add('srOnly')\r\n  }\r\n  showLabel = () => {\r\n    const showLabel = document.querySelector('storyLabel');\r\n    showLabel.classList.remove('srOnly')\r\n  }\r\nrender() {\r\n\r\n  const { picture, altText } = this.state;\r\n  return (\r\n    <Fragment>\r\n      <header>\r\n        <div className=\"wrapper\">\r\n          \r\n          <h1>Worth a Thousand</h1>\r\n          <p className=\"instructions\">Choose an image. Write a story. Share your creativity.</p>\r\n\r\n          <div className=\"generatorFlex\">\r\n            <div className=\"imgFlex\">\r\n              <img className=\"selectImgContainer\" src={picture} alt={altText}/>\r\n\r\n              <button onClick={this.getRandomImage}>Choose Your Inspiration</button>\r\n            </div>\r\n            <form onSubmit={this.handleSubmit}>\r\n              <input placeholder=\"Name\" id=\"name\" type=\"text\" onChange={this.handleNameChange}></input>\r\n              <label className=\"srOnly\" htmlFor=\"name\">Name</label>\r\n                <div className=\"inputContainer\">\r\n                  <div id='textBox'>\r\n                    <textarea\r\n                      type=\"text\" \r\n                      id=\"theStory\"\r\n                      maxLength=\"1000\"\r\n                      required={true}\r\n                      placeholder=\"Your story starts here...\"\r\n                      onChange={this.handleInputChange}></textarea>\r\n\r\n                    <label className=\"storyLabel srOnly\" htmlFor=\"theStory\">Write your story here.</label>\r\n                    <p className=\"counter\" >{this.state.userInput.length}/1000</p>\r\n                  </div>\r\n                  <button>Add Your Story</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PictureGenerator;","import { Component } from 'react';\r\n\r\nclass Polaroid extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      polaroidClass: true,\r\n    }\r\n  }\r\n   polaroidFlip = () => {\r\n      this.setState ({\r\n        polaroidClass: !this.state.polaroidClass\r\n      })\r\n\r\n    }\r\n   \r\n  render() {\r\n    return (\r\n      <li key={this.props.story.fireKey}>\r\n        <div onClick={this.polaroidFlip} className={this.state.polaroidClass ? 'polaroid': 'polaroid flipped'}>\r\n          <div className=\"polaroidSide sideFront\">\r\n            <p className=\"turnText\">Turn to read the story -&gt;</p>\r\n            <div className=\"stashedImgContainer\">\r\n              <img src={this.props.story.image} alt={this.props.story.altText}/>\r\n            </div>\r\n          </div>\r\n          <div className=\"polaroidSide sideBack\">\r\n            <p>{this.props.story.story} <strong> â€” {this.props.story.name} </strong></p>\r\n          </div>\r\n        </div>\r\n      </li>\r\n    )\r\n  }\r\n}\r\nexport default Polaroid;","import './App.css';\nimport { Component, Fragment } from 'react';\nimport firebase from './firebase.js';\nimport PictureGenerator from './PictureGenerator'\nimport Polaroid from './Polaroid';\n\nclass App extends Component {\n constructor() {\n    super();\n    this.state = {\n      allStories: []\n    }\n  }\n  componentDidMount() {\n    // call the firebase database\n    const dbRef = firebase.database().ref();\n    // get all the value from the database back\n    dbRef.on('value', (data) => {\n      const firebaseDataObj = data.val();\n      console.log(firebaseDataObj);\n    //make an empty array to store the database data after it's sorted through\n      let storyArray = [];\n     // use a for in loop to sepreate story objects from the returned data\n      for (let propertyKey in firebaseDataObj) {\n        const storyObject = firebaseDataObj[propertyKey];\n      \n        storyObject.fireKey = propertyKey\n        storyArray.push(storyObject)\n      }\n      this.setState({\n        allStories: storyArray\n      })\n    })\n  }\n \n  render() {\n    console.log(this.state.allStories);\n    return (\n      <Fragment>\n        <PictureGenerator />\n            <ul className=\"wrapper\">\n          { \n          // putting the database information on the page\n            this.state.allStories.map((stories) => {\n              return (\n                <Polaroid story={stories}/>\n              )\n            })\n          }\n        </ul>\n      </Fragment>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}